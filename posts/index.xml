<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - emdwyer</title><link>https://emdwyer.github.io/posts/</link><description>All Posts | emdwyer</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>hello@emdwyer.dev (emdwyer)</managingEditor><webMaster>hello@emdwyer.dev (emdwyer)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 06 Aug 2023 00:00:00 +1000</lastBuildDate><atom:link href="https://emdwyer.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Agile HTB Walkthrough</title><link>https://emdwyer.github.io/2023-08-06-agile-htb/</link><pubDate>Sun, 06 Aug 2023 00:00:00 +1000</pubDate><author>emdwyer</author><guid>https://emdwyer.github.io/2023-08-06-agile-htb/</guid><description>Introduction After basic enumeration, we use LFI to read a Python Flask app. We exploit the Werkzeug remote debugger by reading system information from the file system used to derive a PIN granting console access. After executing arbitrary Python code in the browser REPL to get a reverse shell, we connect to a database with credentials from a connection string found earlier, which reveals user credentials granting us SSH access.</description></item><item><title>Bagel HTB Walkthrough</title><link>https://emdwyer.github.io/2023-06-03-bagel-htb/</link><pubDate>Sat, 03 Jun 2023 00:00:00 +1000</pubDate><author>emdwyer</author><guid>https://emdwyer.github.io/2023-06-03-bagel-htb/</guid><description>Introduction A fun machine that begins by exploiting a Python Flask app via Local File Inclusion, and using this to further enumerate the machine. From here, we take an unexpected change in direction to exploit a web socket running on .NET core. Using a JSON deserialization attack, we are able to take advantage of LFI once again to find a private SSH key and gain a foothold. We are able to access another account using previously discovered hard-coded database credentials.</description></item><item><title>Interface HTB Walkthrough</title><link>https://emdwyer.github.io/2023-05-13-interface-htb/</link><pubDate>Sat, 13 May 2023 00:00:00 +1000</pubDate><author>emdwyer</author><guid>https://emdwyer.github.io/2023-05-13-interface-htb/</guid><description>Introduction After some tricky enumeration where I initially miss the obvious, we find and fuzz an API endpoint which converts HTML input to PDF. Looking at the resulting PDF with exiftool, we find dompdf 1.2.0 is used. This is vulnerable to injecting arbitrary PHP into a font file, which the server will execute once included in a stylesheet. Knowing this, we serve up a style sheet, TTF font containing malicious PHP and pass a reference to our stylesheet to the vulnerable API point.</description></item><item><title>Investigation HTB Walkthrough</title><link>https://emdwyer.github.io/2023-04-22-investigation-htb/</link><pubDate>Sat, 22 Apr 2023 00:00:00 +1000</pubDate><author>emdwyer</author><guid>https://emdwyer.github.io/2023-04-22-investigation-htb/</guid><description>Introduction For this machine, we identify a web app using ExifTool to show metadata for images uploaded via a form. Knowing the version of ExifTool used contains a CVE, we are able to command inject into the form and base64 encode/decode an obfuscated reverse shell to gain a foothold. From here, we find an email containing an event viewer log we must search through. We uncover a credential leak where a failed logon attempt shows the user accidentally entered their username in the password field, giving us credentials to SSH into the machine as a real user.</description></item><item><title>Encoding HTB Walkthrough</title><link>https://emdwyer.github.io/2023-04-15-encoding-htb/</link><pubDate>Sat, 15 Apr 2023 00:00:00 +1000</pubDate><author>emdwyer</author><guid>https://emdwyer.github.io/2023-04-15-encoding-htb/</guid><description>Introduction Another exploitable PHP web app that focuses on character conversions. We leverage Local File Inclusion (LFI) to further enumerate the system by looking at Apache config files and PHP source. With some sleuthing, we find work-in-progress code in a git repository &amp;ndash; finding the path to a vulnerable looking PHP script. Knowing this path is only accessible to localhost, we trace back through an existing LFI and use domain confusion in order to perform Server Side Request Forgery.</description></item><item><title>BroScience HTB Walkthrough</title><link>https://emdwyer.github.io/2023-04-08-broscience-htb/</link><pubDate>Sat, 08 Apr 2023 00:00:00 +1000</pubDate><author>emdwyer</author><guid>https://emdwyer.github.io/2023-04-08-broscience-htb/</guid><description>Introduction A moderately challenging machine (for me at least) where we use a basic filter bypass to perform Local File Inclusion, allowing us to read a PHP web app&amp;rsquo;s source code and uncover any insecure code. With this knowledge, we attack a poor attempt at randomness which was a new thing for me in a CTF environment, allowing us to register and activate an account. With login access, we exploit a theme via PHP object injection to get RCE.</description></item><item><title>Mentor HTB Walkthrough</title><link>https://emdwyer.github.io/2023-03-11-mentor/</link><pubDate>Sat, 11 Mar 2023 00:00:00 +1100</pubDate><author>emdwyer</author><guid>https://emdwyer.github.io/2023-03-11-mentor/</guid><description>Introduction As you&amp;rsquo;ll see, we get to visit SNMP enumeration (not once, but twice!) and deal with a flaky web server which we fail to enumerate initially. Once the web server is accessible after a well deserved break, we manage to find some APIs to enumerate eventually leading to command injection and a reverse shell.
It&amp;rsquo;s here we realise we&amp;rsquo;re in a fairly minimal Docker container with not many tools at our disposal.</description></item><item><title>Awkward HTB Walkthrough</title><link>https://emdwyer.github.io/2023-02-25-awkward-htb/</link><pubDate>Sat, 25 Feb 2023 00:00:00 +1100</pubDate><author>emdwyer</author><guid>https://emdwyer.github.io/2023-02-25-awkward-htb/</guid><description>Introduction A challenging machine offering a VueJS app backed by an Express API. There&amp;rsquo;s also a separate PHP web store app to exploit for privilege escalation and gaining root access on the machine. This was the next medium machine on my list to tick off in my quest to progress to more difficult boxes and gain further experience.
As you&amp;rsquo;ll see, I had some fun with enumerating things, and my notes reflect this.</description></item><item><title>Photobomb HTB Walkthrough</title><link>https://emdwyer.github.io/2023-02-11-photobomb/</link><pubDate>Sat, 11 Feb 2023 00:00:00 +1100</pubDate><author>emdwyer</author><guid>https://emdwyer.github.io/2023-02-11-photobomb/</guid><description>Introduction An easy rated machine, and one of my first on HTB that was recently retired. This box was pwned before I started using MarkText and adding in screenshots to my markdown notes, so I&amp;rsquo;ve only captured STDOUT here, and the entire write up is boring plain text.. sorry.
As always, I use Parrot OS Security Edition in a VirtualBox VM, with the OpenVPN client to connect to the HackTheBox VPN.</description></item><item><title>Ambassador HTB Walkthrough</title><link>https://emdwyer.github.io/2023-01-29-ambassador-htb/</link><pubDate>Sun, 29 Jan 2023 00:00:00 +1100</pubDate><author>emdwyer</author><guid>https://emdwyer.github.io/2023-01-29-ambassador-htb/</guid><description><![CDATA[Intro This was my first medium difficulty box. I noticed it was the highest rated and due to be retired in 2 days &ndash; so I decided to tackle this machine in order to quickly release a walkthrough (content creation! clicks! views!) and practice my note taking skills. While I enjoy being in &rsquo;the zone&rsquo;, it is well worthwhile breaking momentarily to take comprehensive notes that can be weaved into a cohesive narrative &ndash; if only so I can retrace my steps and help with future CTF challenges.]]></description></item></channel></rss>