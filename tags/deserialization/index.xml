<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>deserialization - Tag - emdwyer</title><link>https://emdwyer.github.io/tags/deserialization/</link><description>deserialization - Tag - emdwyer</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>hello@emdwyer.dev (emdwyer)</managingEditor><webMaster>hello@emdwyer.dev (emdwyer)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 08 Apr 2023 00:00:00 +1000</lastBuildDate><atom:link href="https://emdwyer.github.io/tags/deserialization/" rel="self" type="application/rss+xml"/><item><title>BroScience HTB Walkthrough</title><link>https://emdwyer.github.io/2023-04-08-broscience-htb/</link><pubDate>Sat, 08 Apr 2023 00:00:00 +1000</pubDate><author>emdwyer</author><guid>https://emdwyer.github.io/2023-04-08-broscience-htb/</guid><description>Introduction A moderately challenging machine (for me at least) where we use a basic filter bypass to perform Local File Inclusion, allowing us to read a PHP web app&amp;rsquo;s source code and uncover any insecure code. With this knowledge, we attack a poor attempt at randomness which was a new thing for me in a CTF environment, allowing us to register and activate an account. With login access, we exploit a theme via PHP object injection to get RCE.</description></item></channel></rss>